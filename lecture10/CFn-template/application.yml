AWSTemplateFormatVersion: "2010-09-09"

Description: "Create an EC2 instance"

Parameters:
  name:
    Type: String

  InstanceType:
    Type: String
    Default: "t2.micro"
    AllowedValues: ["t2.micro", "t2.small", "t2.medium"]
  
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "Name of an existing EC2 key pair for SSH access"

  DBInstanceName:
    Type: String
    Default: "rds"

  DBMasterUserName:
    Type: String
    Default: "dbuser"

  DBPassword: 
    Default: "dbpassword"
    NoEcho: true
    Type: String
    MinLength: 8
    MaxLength: 41
    AllowedPattern: "[a-zA-Z0-9]*"

Resources:
  EC2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: "ami-05b37ce701f85f26a"
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !ImportValue lecture10-public-subnet-1 #Export名確認
          GroupSet:
            - !ImportValue lecture10-ec2sg
      Tags:
        - Key: Name
          Value: !Sub "${name}-ec2-instance"

  RDS:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub "${name}-${DBInstanceName}"
      Engine: MySQL
      EngineVersion: 8.0.33
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      StorageType: gp2 
      MasterUsername: !Ref DBMasterUserName
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !ImportValue lecture10-rdssg #確認
      AutoMinorVersionUpgrade: false
      Tags:
        - Key: Name
          Value: !Sub "${name}-rds"

  DBSubnetGroup: 
    Type: "AWS::RDS::DBSubnetGroup"
    Properties: 
      DBSubnetGroupName: !Sub "${name}-${DBInstanceName}-subnet"
      DBSubnetGroupDescription: "-"
      SubnetIds: 
        - !ImportValue lecture10-private-subnet-1 #確認
        - !ImportValue lecture10-private-subnet-2 #確認
      Tags:
        - Key: Name
          Value: !Sub "${name}-db-subnetgroup"

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic: "String"
      IpAddressType: ipv4
      Name: lecture10-alb
      Scheme: internet-facing
      SecurityGroups:
        - !ImportValue lecture10-albsg
      Subnets:
        - !ImportValue lecture10-public-subnet-1
        - !ImportValue lecture10-public-subnet-2
      Tags:
        - Key: Name
          Value: !Sub "${name}-alb"
      Type: application
      Tags:
        - Key: Name
          Value: !Sub "${name}-alb"

  ALBtargetgroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: 200
      Name: !Sub ${name}-alb-target-group
      Port: 80
      Protocol: HTTP
      ProtocolVersion: HTTP1
      Tags: 
        - Key: Name
          Value: !Sub "${name}-alb-target-group"
      TargetType: instance
      Targets: 
        - Id: !Ref EC2
      UnhealthyThresholdCount: 2
      VpcId: !ImportValue lecture10-vpc

  ALBlistener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref ALBtargetgroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  S3:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: lecture10-s3
      Tags:
        - Key: Name
          Value: !Sub "${name}-s3"

  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "S3-FullAccess-Policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "s3:*"
                Resource: "*"
